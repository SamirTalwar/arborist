#!/usr/bin/env node

const child_process = require('child_process');
const crypto = require('crypto');
const os = require('os');

function main() {
    let inputFiles = process.argv.slice(2);
    let outputFile = compile(inputFiles);

    global.window = global;
    let Elm = require(outputFile);
    let app = Elm.Main.worker();
    app.ports.output.subscribe(result => {
        displayTestResult(result);
        if (!result.passed) {
            process.exitCode = 1;
        }
    });
}

function compile(inputFiles) {
    let outputFile = `${os.tmpdir()}/arborist-${crypto.randomBytes(16).readUInt32LE(0)}.js`;
    child_process.execFileSync('elm', ['make', '--warn', '--yes', '--output', outputFile].concat(inputFiles));
    return outputFile;
}

function displayTestResult(result) {
    let {passed, name, failureMessages} = result;
    if (passed) {
        process.stdout.write(green(`${name} PASSED\n`));
    } else {
        process.stdout.write(red(`${name} FAILED${displayMessages(failureMessages)}\n`));
    }
}

function displayMessages(messages) {
  return messages.map(message => `\n  ${message[0]}:\n  ${message[1]}`).join('');
}

function green(string) {
    return color('\x1b[32m', string);
}

function red(string) {
    return color('\x1b[31m', string);
}

function color(code, string) {
    if (process.stdout.isTTY) {
        return `${code}${string}\x1b[0m`;
    } else {
        return string;
    }
}

main();
